(await ethers.provider.getBalance("0x90B3EA700173274560182CbF76ED8E6E66Ad2494")).toString()
const SCORE_V2_ADDRESS = "0xabF095e6EAFD0884f23f444da6b7482876CFB965";
const SCORE = "0xabF095e6EAFD0884f23f444da6b7482876CFB965";
)
  "smoke test"
  1,
  "0x9Ef6454D7895b89275d3cADAB27FB4802AEf4A07",
await c2.callStatic.addXpAndLog(
(await c2.xpOf("0x9Ef6454D7895b89275d3cADAB27FB4802AEf4A07")).toString()
const c2 = await ethers.getContractAt(abiScore, SCORE);
];
  "function addXpAndLog(address player, uint256 amount, string title)"
  "function xpOf(address) view returns (uint256)",
const abiScore = [
(await c.owner()).toString()
const c = await ethers.getContractAt(abiOwn, SCORE);
const abiOwn = ["function owner() view returns (address)"];
const SCORE = "0xabF095e6EAFD0884f23f444da6b7482876CFB965";
(await c.owner()).toString(
const c = await ethers.getContractAt(abiOwn, SCORE);
const abiOwn = ["function owner() view returns (address)"];
const SCORE = "0xabF095e6EAFD0884f23f444da6b7482876CFB965";
console.log("balance =", (await nft.balanceOf(PLAYER)).toString());
);
  nftAddr
   "function tokenOfOwnerByIndex(address,uint256) view returns (uint256)"],
  ["function balanceOf(address) view returns (uint256)",
const nft = await ethers.getContractAt(
console.log("allowed 80002 =", await core.allowedDstChains(80002));
console.log("has code?", (await ethers.provider.get
console.log("core.questNFT =", nftAddr);
const nftAddr = await core.questNFT();
const core = await ethers.getContractAt("ZetaQuestCore", CORE);
const PLAYER = "0x9Ef6454D7895b89275d3cADAB27FB4802AEf4A07";
const CORE   = "0xA9629dDFc4E2394f983c937516f9CD7D1e7F84aa";
console.log("balance =", (await nft.balanceOf(PLAYER)).toString());
);
  nftAddr
   "function tokenOfOwnerByIndex(address,uint256) view returns (uint256)"],
  ["function balanceOf(address) view returns (uint256)",
const nft = await ethers.getContractAt(
console.log("allowed 80002 =", await core.allowedD
console.log("has code?", (await ethers.provider.get
console.log("core.questNFT =", nftAddr);
const nftAddr = await core.questNFT();
const core = await ethers.getContractAt("ZetaQuestCore", CORE);
const PLAYER = "0x9Ef6454D7895b89275d3cADAB27FB4802AEf4A07";
const PLAYER =0x9Ef6454D7895b89275d3cADAB27FB4802AEf4A07;
const CORE =0xA9629dDFc4E2394f983c937516f9CD7D1e7F84aa;
const score = await ethers.getContract
const SCORE = "0x0x120Aa7A6e13dfb2B51F190da54D4f86B0949fd85";
const score = await ethers.getContractAt("ScoreV2", SCORE); 
const SCORE=0x0x120Aa7A6e13dfb2B51F190da54D4f86B0949fd85;
const SCORE = "0x0x120Aa7A6e13dfb2B51F190da54D4f86B0949fd85";
try { console.log("DESPUÉS:", (await nft.tokenURI(0)).toString()); } catch(e) {}
await nft.setBaseURI("https://ipfs.io/ipfs/bafybeid25uxtoc4dk7lga3fz7r5v3lqysyz5bcmfcusdxhfhfphx6jqb7e/traveler-");
try { console.log("ANTES:", (await nft.tokenURI(0)).toString()); } catch(e) { console.log("No pude leer tokenURI(0), no pasa nada"); }
const nft = await ethers.getContractAt("ZetaQuestNFT", addr);
const addr = 0x3DbAfeC83B70a60A0d2e0Fcc984a500fdAEAdDFF;
const addr = 0x3DbAfeC83B70a60A0d2e0Fcc984a500fdAEAdDFF";
try { console.log("DESPUÉS:", (await nft.tokenURI(0)).toString()); } catch(e) {}
// Comprobar de nuevo:
await nft.setBaseURI("https://ipfs.io/ipfs/bafybeid25uxtoc4dk7lga3fz7r5v3lqysyz5bcmfcusdxhfhfphx6jqb7e/traveler-");
// Intentar cambiar baseURI (si tu contrato lo permite y eres owner):
try { console.log("ANTES:", (await nft.tokenURI(0)).toString()); } catch(e) { console.log("No pude leer tokenURI(0), no pasa nada"); }
te el token 0):
// Ver qué devuelve (si exis
const nft = await ethers.getContractAt("Zlib
const addr = "0x3DbAfeC83B70a60A0d2e0Fcc984a500fdAEAdDFF";